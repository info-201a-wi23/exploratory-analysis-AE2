x <- 1
my_var <- 6
my_Var <- 7
MY_VAR <- 8
my_var <- 6
my_Var <- 7
MY_VAR <- 8
source("~/.active-rstudio-document")
my_var + my_Var
my_var <- 6
my_Var <- 7
MY_VAR <- 8
my_var + my_Var
age <- 21
hometown <- "Seattle, WA"
food <- "Salmon salad"
age <- 21
likes_rain <- FALSE
# Calculate someone's likely birth year only by using the age variable and a
# basic math operation
birth_year <- 2023 - age
# Use a built-in R function to mash together each character string and variable,
# and print the message to the console
paste("My partner's hometown is", hometown)
paste("My partner's favorite food is", food)
paste("My partner was probably born in", birth_year)
paste("The statement 'my partner likes rain' is", likes_rain)
# Use a built-in R function to print the data type of each variable to the console
typeof(hometown)
typeof(food)
typeof(age)
typeof(likes_rain)
install.packages("cowsay")
# Load package
library("cowsay")
# Use the cowsay function say()
say("Didn't I do it for you? Why didn't you do it for me?")
say("Didn't I do it for you?
Why didn't you do it for me?")
# Read the documentation for the function say()
help(say)
# Use the cowsay function say()
say()
say("Didn't I do it for you?
Why didn't you do it for me?")
# 2. Change the animal
say(by_color = "purple")
# 3. Change the color of the animal
say(by_color = "springgreen")
# 2. Change the animal
say(by = "giraffe")
# 2. Change the animal
say(by = "duckling")
# 2. Change the animal
say(by = "ghost")
# 2. Change the animal
say(by = "grumpycat")
say(what = "Didn't I do it for you?
Why didn't you do it for me?")
# 2. Change the animal
say(by = "grumpycat")
# 3. Change the color of the animal
say(by_color = "springgreen")
# Now use the function say() from the package cowsay and:
# 1. Change the message
say(what = "Didn't I do it for you?
Why didn't you do it for me?")
# 2. Change the animal
say(by = "grumpycat")
# 3. Change the color of the animal
say(by_color = "springgreen")
# Then take a screenshot of your artwork and share it in #cowsay-practice
say(what = "Didn't I do it for you?
Why didn't you do it for me?", by = "frog", by_color = "springgreen")
# Then take a screenshot of your artwork and share it in #cowsay-practice
say(what = "Didn't I do it for you?
Why didn't you do it for me?", what_color = "white", by = "frog", by_color = "springgreen")
# Then take a screenshot of your artwork and share it in #cowsay-practice
say(what = "Didn't I do it for you?
Why didn't you do it for me?", what_color = "white", by = "hypnotoad", by_color = "springgreen")
# Then take a screenshot of your artwork and share it in #cowsay-practice
say(what = "Didn't I do it for you?
Why don't I do it for you?", what_color = "white", by = "hypnotoad", by_color = "springgreen")
# Then take a screenshot of your artwork and share it in #cowsay-practice
say(what = "Didn't I do it for you?
Why don't I do it for you?", what_color = "white", by = "endlesshorse", by_color = "springgreen")
# Then take a screenshot of your artwork and share it in #cowsay-practice
say(what = "Didn't I do it for you?
Why don't I do it for you?", what_color = "white", by = "behindcat", by_color = "springgreen")
# Then take a screenshot of your artwork and share it in #cowsay-practice
say(what = "Didn't I do it for you?
Why don't I do it for you?", what_color = "white", by = "hypnotoad", by_color = "springgreen")
# Then take a screenshot of your artwork and share it in #cowsay-practice
say(what = "Didn't I do it for you?
Why don't I do it for you?", what_color = "white", by = "pig", by_color = "springgreen")
# Then take a screenshot of your artwork and share it in #cowsay-practice
say(what = "Why won't you do it for me?
When all I do is for you", what_color = "white", by = "pig", by_color = "springgreen")
# Then take a screenshot of your artwork and share it in #cowsay-practice
say(what = "Why won't you do it for me?
When all I do is for you", what_color = "white", by = "pink", by_color = "springgreen")
# Then take a screenshot of your artwork and share it in #cowsay-practice
say(what = "Why won't you do it for me?
When all I do is for you", what_color = "white", by = "pig", by_color = "pink")
cnd_to_usd <- function(canadian_dollars) {
us_value <- .80 * canadian_dollars
return(us_value)
}
# STEP 2: USE AND TEST THE FUNCTION
# Save this variable
my_canadian_payout <- 250
usd_payout <- cnd_to_usd(my_canadian_payout)
print(usd_payout)
print(cnd_amount)
print(my_canadian_payout)
print(usd_payout)
source("~/Desktop/INFO201/week-2-exercises-tttran01/Create-Functions.R")
print(cnd_amount)
office_temperature <- 75
ideal_temperature <- 67
if(office_temperature > ideal_temperature) {
print("too hot! Grab a drink.")
} else if (office_temperature < ideal_temperature) {
print("too cold! Grab a blanket!")
} else {
print("ideal. Get back to work!")
}
ideal_temperature <- 80
if(office_temperature > ideal_temperature) {
print("too hot! Grab a drink.")
} else if (office_temperature < ideal_temperature) {
print("too cold! Grab a blanket!")
} else {
print("ideal. Get back to work!")
}
View(cnd_to_usd)
source("~/Desktop/INFO201/week-2-exercises-tttran01/Create-Functions.R")
# Create a variable `my_name` that contains your name
my_name <- "Terresa Tran"
# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
name_length <- nchar(my_name)
# Print the number of letters in your name
print(name_length)
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing <- paste(my_name, "is programming!")
# Make the `now_doing` variable upper case
toupper(now_doing)
source("~/Desktop/INFO201/week-3-exercises-tttran01/Exercise-6-1.R")
source("~/Desktop/INFO201/week-3-exercises-tttran01/Exercise-6-1.R")
survivor_df <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/Survivor-Viewers.csv")
library("dplyr")
View(survivor_df)
avg_viewers <- survivor_df %>% summarize(avg_viewers = mean(viewers))
survivor_df %>% plot(season, viewers)
survivor_df %>% plot(season, viewers)
survivor_df %>% plot(season, viewers, type = "b")
survivor_df %>% plot(season, avg_viewers)
install.packages("nycflights13")
library("nycflights13")
library("dplyr")
flights <- flights
airlines <- airlines
airports <- airports
survivor_df %>% group_by(season) %>% summarize(viewers_per_season = mean(viewers)) %>% plot(season, viewers_per_season)
survivor_df %>% group_by(season) %>% summarize(viewers_per_season = mean(viewers))
plot <- survivor_df %>% group_by(season) %>% summarize(viewers_per_season = mean(viewers))
print(n = ...)
print(n = 31)
print(x = 31)
plot <- survivor_df %>% group_by(season) %>% summarize(viewers_per_season = mean(viewers)) %>% plot(season, viewers_per_season)
avg_viewers <- survivor_df %>% summarize(avg_viewers = mean(viewers, na.rm = T))
avg_viewers <- survivor_df %>% group_by(season) %>% summarize(avg_viewers = mean(viewers, na.rm = T))
View(avg_viewers)
plot(avg_viewers, type = 'b')
most_views_row <- survivor_df %>% summarize(most_views = max(viewers))
View(most_views_row)
most_views_row <- survivor_df %>% filter(most_views = max(viewers, na.rm = T))
most_views_row <- survivor_df %>% filter(most_views == max(viewers, na.rm = T))
# Find the episode with the most number of viewers `most_views_row`
most_views_row <- survivor_df %>% filter(viewers == max(viewers, na.rm = T))
# Find the episode with the most number of viewers `most_views_row`
most_views_row <- survivor_df %>% filter(viewers == max(viewers, na.rm = T)) %>% pull(viewers)
most_views_row <- survivor_df %>% filter(viewers == max(viewers, na.rm = T))
View(most_views_row)
most_views <- most_views %>% pull(viewers)
most_views <- most_views_row %>% pull(viewers)
survivor_df <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/Survivor-Viewers.csv", stringsAsFactors = F)
# Calculate the average number of viewers for each season `avg_viewers`
avg_viewers <- survivor_df %>% group_by(season) %>% summarize(avg_viewers = mean(viewers, na.rm = T))
# For fun, let's make a plot of avg viewers over season number
plot(avg_viewers, type = 'b')
# Find the episode with the most number of viewers `most_views_row`
most_views_row <- survivor_df %>% filter(viewers == max(viewers, na.rm = T))
# Find the episode with the most number of viewers, then pull the number of viewers and save it as a variable `most_views`
most_views <- most_views_row %>% pull(viewers)
View(flights)
View(airports)
View(airlines)
dep_delay_by_month <- flights %>% group_by(month) %>% summarise(dep_delay = mean(dep_delay))
View(dep_delay_by_month)
dep_delay_by_month <- flights %>% group_by(month) %>% summarise(dep_delay = mean(dep_delay, na.rm = T))
View(dep_delay_by_month)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarize your data
dep_delay_by_month <- flights %>% group_by(month) %>% summarise(delay = mean(dep_delay, na.rm = T))
View(dep_delay_by_month)
plot(dep_delay_by_month, type = 'b')
# Use `left_join()` to join the "flights" dataframe to the "airlines" dataframe, which has the airline information
left_join(flights, airlines, by = "carrier")
# Use `left_join()` to join the "flights" dataframe to the "airlines" dataframe, which has the airline information
flights <- left_join(flights, airlines, by = "carrier")
View(flights)
avg_airline_delay <- flights %>% group_by(name) %>% summarise(delay = mean(dep_delay, na.rm = T))
View(avg_airline_delay)
source("~/Desktop/INFO201/week-5-exercises-tttran01/National-Park-Groupby.R", echo=TRUE)
np_data <- read.csv("https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv")
avg_park_visits <- np_data %>%
group_by(ParkName) %>%
summarize(avg_park = mean(RecreationVisits))
View(avg_park_visits)
avg_state_visits <- np_data %>%
group_by(State) %>%
summarize(avg_state = mean(RecreationVisits))
View(avg_state_visits)
# What patterns or surprises do you notice?
avg_park__state_visits <- np_data %>%
group_by(ParkName, State) %>%
summarize(avg = mean(RecreationVisits))
View(avg_park__state_visits)
distinct_parks <- np_data %>%
group_by(State) %>%
summarize(distinct_parks = n_distinct(ParkName))
View(distinct_parks)
# 1.d Load the *county level* data from the following URL into a variable called `counties`
# NOTE: This is a large dataset. It may take 30-60 seconds to load.
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-counties-covid-2023.csv
counties <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-counties-covid-2023.csv", stringsAsFactors = F)
# 1.c Load the *state level* data from the following URL into a variable called `states`
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-states-covid-2023.csv
states <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-states-covid-2023.csv", stringsAsFactors = F)
# 1.b Load the *national level* data from the following URL into a variable called `national`
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv
national <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv", stringsAsFactors = F)
View(counties)
View(national)
View(states)
library("dplyr")
library("tidyverse")
View(counties)
source("~/Desktop/INFO201/exploratory-analysis-AE2/Chart_1.R", echo=TRUE)
setwd("~/Desktop/INFO201/exploratory-analysis-AE2")
oscars_data <- read.xlsx("oscars.xlsx")
View(oscars_data)
films_data <- oscars_data %>%
drop_na(film, winner) %>%
group_by(film) %>%
summarize(wins = sum(winner, na.rm = TRUE)) %>%
arrange(desc(wins)) %>%
top_n(5)
chart2 <- ggplot(data = films_data) +
geom_col(mapping = aes(
x = reorder(film, wins),
y = wins,
fill = film
)) +
labs(
title = "Films with most Oscar wins",
x = "film",
y = "wins"
) +
coord_flip() +
theme(legend.position = "none")
chart2
race_data <- oscars_data %>%
drop_na(Race, winner) %>%
group_by(Race) %>%
summarize(wins = sum(winner)) %>%
mutate(percent = wins / sum(wins) * 100) %>%
arrange(desc(wins))
# create a pie chart
ggplot(race_data, aes(x = "", y = percent, fill = Race)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start = 0) +
labs(title = "Oscar Wins by Race", fill = "Race") +
theme_void()
ggplot(gender_data, aes(x = year_ceremony, y = wins, color = gender)) +
geom_line() +
labs(title = "Oscar Winners by Gender per year", x = "Ceremony Year", y = "Number of Winners", color = "Gender") +
scale_x_continuous(breaks = seq(1920, 2020, 10))
oscars_data <- oscars_data %>%
mutate(gender = if_else(gender == "female", "Female", gender))
# create a data frame with number of winners by gender and year
gender_data <- oscars_data %>%
drop_na(gender, year_ceremony, winner) %>%
group_by(gender, year_ceremony) %>%
summarize(wins = sum(winner))
# create a line plot
ggplot(gender_data, aes(x = year_ceremony, y = wins, color = gender)) +
geom_line() +
labs(title = "Oscar Winners by Gender per year", x = "Ceremony Year", y = "Number of Winners", color = "Gender") +
scale_x_continuous(breaks = seq(1920, 2020, 10))
# create data frame that sorts oscars_data by winning film and pull top films
films_data <- oscars_data %>%
drop_na(film, winner) %>%
group_by(film) %>%
summarize(wins = sum(winner, na.rm = TRUE)) %>%
arrange(desc(wins)) %>%
top_n(5)
# create bar chart
chart_1 <- ggplot(data = films_data) +
geom_col(mapping = aes(
x = reorder(film, wins),
y = wins,
fill = film
)) +
labs(
title = "Films with most Oscar wins",
x = "film",
y = "wins"
) +
coord_flip() +
theme(legend.position = "none")
View(chart_1)
chart_1
# load states dataframe into variable `covid` and filter for most recent data
covid <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-states-covid-2023.csv", stringsAsFactors = FALSE) %>%
filter(date == max(date, na.rm=T))
recent_date <- covid %>%
slice_max(date, with_ties = F) %>%
pull(date)
# 2. The lowest number of cases on the most recent date
low_cases <- covid %>%
filter(cases == min(cases, na.rm = T)) %>%
pull(cases)
# 3. The state with the lowest number of cases on the most recent date
state_low_cases <- covid %>%
filter(cases == min(cases, na.rm =T)) %>%
pull(state)
sum_info <- list()
sum_info$recent_date <- recent_date
sum_info$low_cases <- low_cases
sum_info$state_low_cases <- state_low_cases
View(sum_info)
